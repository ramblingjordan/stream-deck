export = index;
declare class index {
  static AUTO: number;
  static BLEND_DARKEN: string;
  static BLEND_DESTINATION_OVER: string;
  static BLEND_DIFFERENCE: string;
  static BLEND_EXCLUSION: string;
  static BLEND_HARDLIGHT: string;
  static BLEND_LIGHTEN: string;
  static BLEND_MULTIPLY: string;
  static BLEND_OVERLAY: string;
  static BLEND_SCREEN: string;
  static BLEND_SOURCE_OVER: string;
  static EDGE_CROP: number;
  static EDGE_EXTEND: number;
  static EDGE_WRAP: number;
  static FONT_SANS_10_BLACK: string;
  static FONT_SANS_128_BLACK: string;
  static FONT_SANS_128_WHITE: string;
  static FONT_SANS_12_BLACK: string;
  static FONT_SANS_14_BLACK: string;
  static FONT_SANS_16_BLACK: string;
  static FONT_SANS_16_WHITE: string;
  static FONT_SANS_32_BLACK: string;
  static FONT_SANS_32_WHITE: string;
  static FONT_SANS_64_BLACK: string;
  static FONT_SANS_64_WHITE: string;
  static FONT_SANS_8_BLACK: string;
  static FONT_SANS_8_WHITE: string;
  static HORIZONTAL_ALIGN_CENTER: number;
  static HORIZONTAL_ALIGN_LEFT: number;
  static HORIZONTAL_ALIGN_RIGHT: number;
  static MIME_BMP: string;
  static MIME_GIF: string;
  static MIME_JPEG: string;
  static MIME_PNG: string;
  static MIME_TIFF: string;
  static MIME_X_MS_BMP: string;
  static PNG_FILTER_AUTO: number;
  static PNG_FILTER_AVERAGE: number;
  static PNG_FILTER_NONE: number;
  static PNG_FILTER_PATH: number;
  static PNG_FILTER_SUB: number;
  static PNG_FILTER_UP: number;
  static RESIZE_BEZIER: string;
  static RESIZE_BICUBIC: string;
  static RESIZE_BILINEAR: string;
  static RESIZE_HERMITE: string;
  static RESIZE_NEAREST_NEIGHBOR: string;
  static VERTICAL_ALIGN_BOTTOM: number;
  static VERTICAL_ALIGN_MIDDLE: number;
  static VERTICAL_ALIGN_TOP: number;
  static appendConstructorOption(name: any, test: any, run: any): void;
  static colorDiff(rgba1: any, rgba2: any): any;
  static compareHashes(hash1: any, hash2: any): any;
  static create(...args: any[]): any;
  static cssColorToHex(cssColor: any): any;
  static defaultMaxListeners: any;
  static diff(img1: any, img2: any, ...args: any[]): any;
  static distance(img1: any, img2: any): any;
  static hasAlpha: {
    "image/png": boolean;
  };
  static init(): void;
  static intToRGBA(i: any, cb: any): any;
  static limit255(n: any): any;
  static listenerCount(emitter: any, type: any): any;
  static loadFont(file: any, cb: any): any;
  static measureText(font: any, text: any): any;
  static measureTextHeight(font: any, text: any, maxWidth: any): any;
  static read(...args: any[]): any;
  static rgbaToInt(r: any, g: any, b: any, a: any, cb: any): any;
  static usingDomains: boolean;
  constructor(...args: any[]);
  addListener(type: any, listener: any): any;
  autocrop(...args: any[]): any;
  background(...args: any[]): any;
  backgroundQuiet(hex: any, cb: any): any;
  blit(src: any, x: any, y: any, srcx: any, srcy: any, srcw: any, srch: any, cb: any): any;
  blur(r: any, cb: any): any;
  brightness(val: any, cb: any): any;
  clone(...args: any[]): any;
  cloneQuiet(cb: any): any;
  color(actions: any, cb: any): any;
  colorType(s: any, cb: any): any;
  colour(actions: any, cb: any): any;
  composite(src: any, x: any, y: any, ...args: any[]): any;
  contain(w: any, h: any, alignBits: any, mode: any, cb: any): any;
  contrast(val: any, cb: any): any;
  convolute(kernel: any, x: any, y: any, w: any, h: any, cb: any): any;
  convolution(kernel: any, edgeHandling: any, cb: any): any;
  cover(w: any, h: any, alignBits: any, mode: any, cb: any): any;
  crop(...args: any[]): any;
  cropQuiet(x: any, y: any, w: any, h: any, cb: any): any;
  deflateLevel(l: any, cb: any): any;
  deflateStrategy(s: any, cb: any): any;
  displace(map: any, offset: any, cb: any): any;
  distanceFromHash(compareHash: any): any;
  dither16(cb: any): any;
  dither565(cb: any): any;
  emit(type: any, args: any): any;
  emitError(methodName: any, err: any): void;
  emitMulti(methodName: any, eventName: any, ...args: any[]): void;
  eventNames(): any;
  fade(f: any, cb: any): any;
  filterType(f: any, cb: any): any;
  flip(horizontal: any, vertical: any, cb: any): any;
  gaussian(r: any, cb: any): any;
  getBase64(mime: any, cb: any): any;
  getExtension(): any;
  getHeight(): any;
  getMIME(): any;
  getMaxListeners(): any;
  getPixelColor(x: any, y: any, cb: any): any;
  getPixelIndex(x: any, y: any, edgeHandling: any, cb: any): any;
  getWidth(): any;
  grayscale(cb: any): any;
  greyscale(cb: any): any;
  hasAlpha(): any;
  hash(base: any, cb: any): any;
  inspect(): any;
  invert(cb: any): any;
  listenerCount(type: any): any;
  listeners(type: any): any;
  mask(src: any, ...args: any[]): any;
  mirror(horizontal: any, vertical: any, cb: any): any;
  normalize(cb: any): any;
  off(type: any, listener: any): any;
  on(type: any, listener: any): any;
  once(type: any, listener: any): any;
  opacity(f: any, cb: any): any;
  opaque(cb: any): any;
  pHash(): any;
  parseBitmap(data: any, path: any, finish: any): void;
  pixelate(size: any, x: any, y: any, w: any, h: any, cb: any): any;
  posterize(n: any, cb: any): any;
  prependListener(type: any, listener: any): any;
  prependOnceListener(type: any, listener: any): any;
  print(font: any, x: any, y: any, text: any, maxWidth: any, maxHeight: any, cb: any): any;
  quality(n: any, cb: any): any;
  rawListeners(type: any): any;
  removeAllListeners(type: any, ...args: any[]): any;
  removeListener(type: any, listener: any): any;
  resize(w: any, h: any, mode: any, cb: any): any;
  rgba(bool: any, cb: any): any;
  rotate(deg: any, mode: any, cb: any): any;
  scale(f: any, mode: any, cb: any): any;
  scaleToFit(w: any, h: any, mode: any, cb: any): any;
  scan(...args: any[]): any;
  scanQuiet(x: any, y: any, w: any, h: any, f: any, cb: any): any;
  sepia(cb: any): any;
  setMaxListeners(n: any): any;
  setPixelColor(hex: any, x: any, y: any, cb: any): any;
  write(path: any, cb: any): any;
}
declare namespace index {
  class EventEmitter {
    // Circular reference from index.EventEmitter
    static EventEmitter: any;
    static defaultMaxListeners: any;
    static init(): void;
    static listenerCount(emitter: any, type: any): any;
    static usingDomains: boolean;
    addListener(type: any, listener: any): any;
    emit(type: any, args: any): any;
    eventNames(): any;
    getMaxListeners(): any;
    listenerCount(type: any): any;
    listeners(type: any): any;
    off(type: any, listener: any): any;
    on(type: any, listener: any): any;
    once(type: any, listener: any): any;
    prependListener(type: any, listener: any): any;
    prependOnceListener(type: any, listener: any): any;
    rawListeners(type: any): any;
    removeAllListeners(type: any, ...args: any[]): any;
    removeListener(type: any, listener: any): any;
    setMaxListeners(n: any): any;
  }
  namespace decoders { }
  namespace encoders { }
}
